From: <Saved by Blink>
Snapshot-Content-Location: https://web.eecs.umich.edu/~sugih/pointers/summary.html
Subject: GDB Tutorial
Date: Sun, 13 Aug 2023 13:49:00 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--1acngxoU87kuOVdc84bLw8ziKdtjwsgszbA2xJTdob----"


------MultipartBoundary--1acngxoU87kuOVdc84bLw8ziKdtjwsgszbA2xJTdob----
Content-Type: text/html
Content-ID: <frame-B7691A4D06CED6EA05435CA75D3AE14C@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://web.eecs.umich.edu/~sugih/pointers/summary.html

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8">=09
<title> GDB Tutorial </title>
</head>

<body>
<h1> GDB Tutorial </h1>

Gdb is a debugger for C (and C++).  It allows you to do things like
run the program up to a certain point then stop and print out the
values of certain variables at that point, or step through the program
one line at a time and print out the values of each variable after
executing each line.  It uses a command line interface.

<p>
This is a brief description of some of the most commonly used features
of gdb.

</p><h2> Compiling </h2>

To prepare your program for debugging with gdb, you must compile it
with the <code>-g</code> flag.  So, if your program is in a source
file called <code>memsim.c</code> and you want to put the executable
in the file <code>memsim</code>, then you would compile with the
following command:

<code>
<pre>gcc -g -o memsim memsim.c
</pre>
</code>

<h2> Invoking and Quitting GDB </h2>

To start gdb, just type <code>gdb</code> at the unix prompt.  Gdb will
give you a prompt that looks like this: <code>(gdb)</code>.  From that
prompt you can run your program, look at variables, etc., using the
commands listed below (and others not listed).  Or, you can start gdb
and give it the name of the program executable you want to debug by
saying

<code>
<pre>gdb <i>executable</i>
</pre>
</code>

<p>
To exit the program
just type <code>quit</code> at the <code>(gdb)</code> prompt (actually
just typing <code>q</code> is good enough).

</p><h2> Commands </h2>

<h4> help </h4>
Gdb provides online documentation.  Just typing
<code>help</code> will give you a list of topics.  Then you can type
<code>help <i>topic</i></code> to get information about that topic
(or it will give you more specific terms that you can ask for help
about).  Or you can just type <code>help <i>command</i></code> and
get information about any other command.

<h4> file </h4>
<code>file <i>executable</i></code> specifies which program you
want to debug.

<h4> run </h4>
<code>run</code> will start the program running under gdb.  (The
program that starts will be the one that you have previously selected
with the <code>file</code> command, or on the unix command line when
you started gdb.  You can give command line arguments to your program
on the gdb command line the same way you would on the unix command
line, except that you are saying <code>run</code> instead of the
program name:

<code>
<pre>run 2048 24 4
</pre>
</code>

You can even do input/output redirection: <code>run &gt;
outfile.txt</code>.

<h4> break </h4>

A ``breakpoint'' is a spot in your program where you would like to
temporarily stop execution in order to check the values of variables,
or to try to find out where the program is crashing, etc.  To set a
breakpoint you use the <code>break</code> command.

<p>
<code>break <i>function</i></code> sets the breakpoint at the
beginning of <code><i>function</i></code>.  If your code is in
multiple files, you might need to specify
<code><i>filename:function</i></code>.

</p><p>
<code>break <i>linenumber</i></code> or <code>break
<i>filename:linenumber</i></code> sets the breakpoint to the given
line number in the source file.  Execution will stop before that line
has been executed.

</p><h4> delete </h4>

<code>delete</code> will delete all breakpoints that you have set.

<p>
<code>delete <i>number</i></code> will delete breakpoint numbered
<code><i>number</i></code>.  You can find out what number each
breakpoint is by doing <code>info breakpoints</code>.  (The command
<code>info</code> can also be used to find out a lot of other stuff.
Do <code>help info</code> for more information.)

</p><h4> clear </h4>

<code>clear <i>function</i></code> will delete the breakpoint set at
that function.  Similarly for <code><i>linenumber</i></code>,
<code><i>filename:function</i></code>, and
<code><i>filename:linenumber</i></code>.

<h4> continue </h4>

<code>continue</code> will set the program running again, after you
have stopped it at a breakpoint.

<h4> step </h4>

<code>step</code> will go ahead and execute the current source line,
and then stop execution again before the next source line.

<h4> next </h4>

<code>next</code> will continue until the next source line in the
current function (actually, the current innermost stack frame, to be
precise).  This is similar to <code>step</code>, except that if the
line about to be executed is a function call, then that function call
will be completely executed before execution stops again, whereas with
<code>step</code> execution will stop at the first line of the
function that is called.

<h4> until </h4>

<code>until</code> is like <code>next</code>, except that if you are
at the end of a loop, <code>until</code> will continue execution until
the loop is exited, whereas <code>next</code> will just take you
back up to the beginning of the loop.  This is convenient if you want
to see what happens after the loop, but don't want to step through
every iteration.

<h4> list </h4>

<code>list <i>linenumber</i></code> will print out some lines from the
source code around <code><i>linenumber</i></code>.  If you give it the
argument <code><i>function</i></code> it will print out lines from the
beginning of that function.  Just <code>list</code> without any
arguments will print out the lines just after the lines that you
printed out with the previous <code>list</code> command.

<h4> print </h4>

<code>print <i>expression</i></code> will print out the value of the
expression, which could be just a variable name.  To print out the
first 25 (for example) values in an array called
<code>list</code>, do

<code>
<pre>print list[0]@25
</pre>
</code>



</body></html>
------MultipartBoundary--1acngxoU87kuOVdc84bLw8ziKdtjwsgszbA2xJTdob------
