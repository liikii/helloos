From: <Saved by Blink>
Snapshot-Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd.html
Subject: 8.-The VFS and the initrd
Date: Mon, 9 Oct 2023 15:55:31 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----"


------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: text/html
Content-ID: <frame-D96DE59BBDD6C232D6B3E339BAE0E781@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/htm=
l4/strict.dtd"><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3Dwindows-1252">
<title>8.-The VFS and the initrd</title><link rel=3D"stylesheet" type=3D"te=
xt/css" href=3D"http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20a=
nd%20the%20initrd_files/highlight.css"><link rel=3D"stylesheet" type=3D"tex=
t/css" href=3D"http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20an=
d%20the%20initrd_files/layout.css"></head><body><div class=3D"header">
<div style=3D"float: right;">
     =20
      <ins style=3D"display:inline-table;border:none;height:60px;margin:0;p=
adding:0;position:relative;visibility:visible;width:468px"><ins id=3D"aswif=
t_0_anchor" style=3D"display:block;border:none;height:60px;margin:0;padding=
:0;position:relative;visibility:visible;width:468px"><iframe allowtranspare=
ncy=3D"true" frameborder=3D"0" height=3D"60" hspace=3D"0" marginwidth=3D"0"=
 marginheight=3D"0" scrolling=3D"no" vspace=3D"0" width=3D"468" id=3D"aswif=
t_0" name=3D"aswift_0" style=3D"left:0;position:absolute;top:0;"></iframe><=
/ins></ins>
    </div>
	www.jamesmolloy.co.uk
	<div class=3D"header_subtitle">
		<a href=3D"http://www.jamesmolloy.co.uk/index.html">Home</a> =BB
	 	JamesM's kernel development tutorials
	</div>
</div>
<div class=3D"main_frame">

<div class=3D"index">
<a href=3D"http://www.jamesmolloy.co.uk/tutorial_html/1.-Environment%20setu=
p.html">1. Environment setup</a><br><a href=3D"http://www.jamesmolloy.co.uk=
/tutorial_html/2.-Genesis.html">2. Genesis</a><br><a href=3D"http://www.jam=
esmolloy.co.uk/tutorial_html/3.-The%20Screen.html">3. The Screen</a><br><a =
href=3D"http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT=
.html">4. The GDT and IDT</a><br><a href=3D"http://www.jamesmolloy.co.uk/tu=
torial_html/5.-IRQs%20and%20the%20PIT.html">5. IRQs and the PIT</a><br><a h=
ref=3D"http://www.jamesmolloy.co.uk/tutorial_html/6.-Paging.html">6. Paging=
</a><br><a href=3D"http://www.jamesmolloy.co.uk/tutorial_html/7.-The%20Heap=
.html">7. The Heap</a><br><a href=3D"http://www.jamesmolloy.co.uk/tutorial_=
html/8.-The%20VFS%20and%20the%20initrd.html" class=3D"selected">8. The VFS =
and the initrd</a><br><a href=3D"http://www.jamesmolloy.co.uk/tutorial_html=
/9.-Multitasking.html">9. Multitasking</a><br><a href=3D"http://www.jamesmo=
lloy.co.uk/tutorial_html/10.-User%20Mode.html">10. User Mode</a><br></div>
<h1>8. The VFS and the initrd</h1>
<p>In this chapter we're going to be starting work on our virtual=20
filesystem (VFS). As a baptism of fire, we will also be implementing an=20
initial ramdisk so you can load configuration files or executables to=20
your kernel.
</p>
<p></p><h2>8.1. The virtual filesystem</h2>
<p></p><div class=3D"image_frame"><img src=3D"http://www.jamesmolloy.co.uk/=
tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/vfs.png"><br><span cl=
ass=3D"image_caption">Graph of nodes.</span></div>A
 VFS is intended to abstract away details of the filesystem and location
 that files are stored, and to give access to them in a uniform manner.=20
They are usually implemented as a graph of nodes; Each node representing
 either a file, directory, symbolic link, device, socket or pipe. Each=20
node should know what filesystem it belongs to and have enough=20
information such that the relavent open/close/etc functions in its=20
driver can be found and executed. A common way to accomplish this is to=20
have the node store function pointers which can be called by the kernel.
 We'll need a few function pointers:
<p></p>
<p></p><ul>
<li><i>Open</i> - Called when a node is opened as a file descriptor.</li>
<li><i>Close</i> - Called when the node is closed.</li>
<li><i>Read</i> - I should hope this was self explanatory!</li>
<li><i>Write</i> - Same as above :-)</li>
<li><i>Readdir</i> - If the current node is a directory, we need a way=20
of enumerating it's contents. Readdir should return the n'th child node=20
of a directory or NULL otherwise. It returns a 'struct dirent', which is
 compatible with the UNIX readdir function.</li>
<li><i>Finddir</i> - We also need a way of finding a child node, given a na=
me in string form. This will be used when following absolute pathnames.</li=
>
</ul>
<p></p>
<p>So far then our node structure looks something like:
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;fs_node<br>
{<br>
&nbsp;&nbsp;<span class=3D"code_primitive">char</span>&nbsp;name[<span clas=
s=3D"code_integer">128</span>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D=
"code_comment">// The filename.</span><br>
&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;flags;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Includes=
 the node type (Directory, file etc).</span><br>
&nbsp;&nbsp;<span class=3D"code_typedef">read_type_t</span>&nbsp;read;&nbsp=
;&nbsp;&nbsp;<span class=3D"code_comment">// These typedefs are just functi=
on pointers. We'll define them later!</span><br>
&nbsp;&nbsp;<span class=3D"code_typedef">write_type_t</span>&nbsp;write;<br=
>
&nbsp;&nbsp;<span class=3D"code_typedef">open_type_t</span>&nbsp;open;<br>
&nbsp;&nbsp;<span class=3D"code_typedef">close_type_t</span>&nbsp;close;<br=
>
&nbsp;&nbsp;<span class=3D"code_typedef">readdir_type_t</span>&nbsp;readdir=
;&nbsp;<span class=3D"code_comment">// Returns the n'th child of a director=
y.</span><br>
&nbsp;&nbsp;<span class=3D"code_typedef">finddir_type_t</span>&nbsp;finddir=
;&nbsp;<span class=3D"code_comment">// Try to find a child in a directory b=
y name.</span><br>
}&nbsp;<span class=3D"code_typedef">fs_node_t</span>;
</div>
<p></p>
<p>Obviously we need to store the filename, and flags contains the type=20
of the node (directory, symlink etc), but we are still missing things.=20
We need to know what permissions the file has, which user/group it=20
belongs to, and possibly also its length.
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;fs_node<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">char</span>&nbsp;name[<spa=
n class=3D"code_integer">128</span>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span cl=
ass=3D"code_comment">// The filename.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mask;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">=
// The permissions mask.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;uid;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comm=
ent">// The owning user.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;gid;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comm=
ent">// The owning group.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;flags;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// In=
cludes the node type.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;length;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Size of=
 the file, in bytes.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">read_type_t</span>&nbsp;read=
;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">write_type_t</span>&nbsp;wri=
te;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">open_type_t</span>&nbsp;open=
;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">close_type_t</span>&nbsp;clo=
se;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">readdir_type_t</span>&nbsp;r=
eaddir;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">finddir_type_t</span>&nbsp;f=
inddir;<br>
}&nbsp;<span class=3D"code_typedef">fs_node_t</span>;
</div>
<p></p>
<p>Again though, we are still missing things! We need a way for the=20
filesystem driver to track which node is which. This is commonly known=20
as an <i>inode</i>. It is just a number assigned by the driver which unique=
ly represents this file. Not only that, but we may have <i>multiple instanc=
es of the same filesystem type</i>, so we must also have a variable that th=
e driver can set to track which filesystem instance it belongs to.
</p>
<p>Lastly we also need to account for symbolic links (shortcuts in=20
Windows-speak). These are merely pointers or placeholders for other=20
files, and so need a pointer member variable.
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;fs_node<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">char</span>&nbsp;name[<spa=
n class=3D"code_integer">128</span>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span cl=
ass=3D"code_comment">// The filename.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mask;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">=
// The permissions mask.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;uid;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comm=
ent">// The owning user.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;gid;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comm=
ent">// The owning group.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;flags;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// In=
cludes the node type. See #defines above.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;inode;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Th=
is is device-specific - provides a way for a filesystem to identify files.<=
/span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;length;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Size of=
 the file, in bytes.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;impl;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">=
// An implementation-defined number.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">read_type_t</span>&nbsp;read=
;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">write_type_t</span>&nbsp;wri=
te;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">open_type_t</span>&nbsp;open=
;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">close_type_t</span>&nbsp;clo=
se;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">readdir_type_t</span>&nbsp;r=
eaddir;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">finddir_type_t</span>&nbsp;f=
inddir;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">struct</span>&nbsp;fs_node=
&nbsp;<span class=3D"code_operator">*</span>ptr;&nbsp;<span class=3D"code_c=
omment">// Used by mountpoints and symlinks.</span><br>
}&nbsp;<span class=3D"code_typedef">fs_node_t</span>;
</div>
<p></p>
<p></p><h3>8.1.1. Mountpoints</h3>
<p></p><div class=3D"image_frame"><img src=3D"http://www.jamesmolloy.co.uk/=
tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/vfs_mountpoint.png"><=
br><span class=3D"image_caption">devfs mounted on /dev</span></div>Mountpoi=
nts
 are the UNIX way of accessing different filesystems. A filesystem is=20
mounted on a directory - any subsequent access to that directory will=20
actually access the root directory of the new filesystem. So essentially
 the directory is told that it is a mountpoint and given a pointer to=20
the root node of the new filesystem. We can actually reuse the <i>ptr</i> m=
ember of fs_node_t for this purpose (as it is currently only used for symli=
nks and they can never be mountpoints).
<p></p>
<p></p><h3>8.1.2. Implementation</h3>
<p></p><h4>8.1.2.1. fs.h</h4>
<p>We first need to define the prototypes for our read/write/etc functions.=
 The first four can be gained by looking at the <a href=3D"http://www.openg=
roup.org/onlinepubs/009695399/toc.htm">POSIX specification</a>. The other t=
wo can just be made up :-)
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">u32int</span>&nbsp;(<span class=3D"code_operator">*</span><span clas=
s=3D"code_typedef">read_type_t</span>)(<span class=3D"code_primitive">struc=
t</span>&nbsp;fs_node<span class=3D"code_operator">*</span>,<span class=3D"=
code_primitive">u32int</span>,<span class=3D"code_primitive">u32int</span>,=
<span class=3D"code_primitive">u8int</span><span class=3D"code_operator">*<=
/span>);<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">u32int</span>&nbsp;(<span class=3D"code_operator">*</span><span clas=
s=3D"code_typedef">write_type_t</span>)(<span class=3D"code_primitive">stru=
ct</span>&nbsp;fs_node<span class=3D"code_operator">*</span>,<span class=3D=
"code_primitive">u32int</span>,<span class=3D"code_primitive">u32int</span>=
,<span class=3D"code_primitive">u8int</span><span class=3D"code_operator">*=
</span>);<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">void</span>&nbsp;(<span class=3D"code_operator">*</span><span class=
=3D"code_typedef">open_type_t</span>)(<span class=3D"code_primitive">struct=
</span>&nbsp;fs_node<span class=3D"code_operator">*</span>);<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">void</span>&nbsp;(<span class=3D"code_operator">*</span><span class=
=3D"code_typedef">close_type_t</span>)(<span class=3D"code_primitive">struc=
t</span>&nbsp;fs_node<span class=3D"code_operator">*</span>);<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;dirent&nbsp;<span class=3D"code_operator">*</span=
>&nbsp;(<span class=3D"code_operator">*</span><span class=3D"code_typedef">=
readdir_type_t</span>)(<span class=3D"code_primitive">struct</span>&nbsp;fs=
_node<span class=3D"code_operator">*</span>,<span class=3D"code_primitive">=
u32int</span>);<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;fs_node&nbsp;<span class=3D"code_operator">*</spa=
n>&nbsp;(<span class=3D"code_operator">*</span><span class=3D"code_typedef"=
>finddir_type_t</span>)(<span class=3D"code_primitive">struct</span>&nbsp;f=
s_node<span class=3D"code_operator">*</span>,<span class=3D"code_primitive"=
>char</span>&nbsp;<span class=3D"code_operator">*</span>name);
</div>
<p></p>
<p></p><div class=3D"code">
struct&nbsp;dirent&nbsp;//&nbsp;One&nbsp;of&nbsp;these&nbsp;is&nbsp;returne=
d&nbsp;by&nbsp;the&nbsp;readdir&nbsp;call,&nbsp;according&nbsp;to&nbsp;POSI=
X.<br>
{<br>
&nbsp;&nbsp;char&nbsp;name[128];&nbsp;//&nbsp;Filename.<br>
&nbsp;&nbsp;u32int&nbsp;ino;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Inode&nbs=
p;number.&nbsp;Required&nbsp;by&nbsp;POSIX.<br>
};
</div>
<p></p>
<p>We also need to define what the values in the fs_node_t::flags field mea=
n:
</p>
<p></p><div class=3D"code">
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">de=
fine</span>&nbsp;FS_FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x0=
1<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_DIRECTORY&nbsp;&nbsp;&nbsp;0x02<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_CHARDEVICE&nbsp;&nbsp;0x03<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_BLOCKDEVICE&nbsp;0x04<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_PIPE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;0x05<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_SYMLINK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x06<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;FS_MOUNTPOINT&nbsp;&nbsp;0x08&nbsp;//&nbsp;Is&nbsp;=
the&nbsp;file&nbsp;an&nbsp;active&nbsp;mountpoint?<br>
</span>
</div>
<p></p>
<p>Notice that <i>FS_MOUNTPOINT</i> is given the value 8, not 7. This is
 so that it can be bitwise-OR'd in with FS_DIRECTORY. The other flags=20
are given sequential values as they are mutually exclusive.
</p>
<p>Lastly we need to define the root node of the filesystem and our read/wr=
ite/etc functions.
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">extern</span>&nbsp;<span class=3D"code_typed=
ef">fs_node_t</span>&nbsp;<span class=3D"code_operator">*</span>fs_root;&nb=
sp;<span class=3D"code_comment">// The root of the filesystem.</span><br>
<br>
<span class=3D"code_comment">// Standard read/write/open/close functions. N=
ote that these are all suffixed with</span><br>
<span class=3D"code_comment">// _fs to distinguish them from the read/write=
/open/close which deal with file descriptors</span><br>
<span class=3D"code_comment">// not file nodes.</span><br>
<span class=3D"code_primitive">u32int</span>&nbsp;<span class=3D"code_funct=
ion">read_fs</span>(<span class=3D"code_typedef">fs_node_t</span>&nbsp;<spa=
n class=3D"code_operator">*</span>node,&nbsp;<span class=3D"code_primitive"=
>u32int</span>&nbsp;offset,&nbsp;<span class=3D"code_primitive">u32int</spa=
n>&nbsp;size,&nbsp;<span class=3D"code_primitive">u8int</span>&nbsp;<span c=
lass=3D"code_operator">*</span>buffer);<br>
<span class=3D"code_primitive">u32int</span>&nbsp;<span class=3D"code_funct=
ion">write_fs</span>(<span class=3D"code_typedef">fs_node_t</span>&nbsp;<sp=
an class=3D"code_operator">*</span>node,&nbsp;<span class=3D"code_primitive=
">u32int</span>&nbsp;offset,&nbsp;<span class=3D"code_primitive">u32int</sp=
an>&nbsp;size,&nbsp;<span class=3D"code_primitive">u8int</span>&nbsp;<span =
class=3D"code_operator">*</span>buffer);<br>
<span class=3D"code_primitive">void</span>&nbsp;<span class=3D"code_functio=
n">open_fs</span>(<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span =
class=3D"code_operator">*</span>node,&nbsp;<span class=3D"code_primitive">u=
8int</span>&nbsp;read,&nbsp;<span class=3D"code_primitive">u8int</span>&nbs=
p;write);<br>
<span class=3D"code_primitive">void</span>&nbsp;<span class=3D"code_functio=
n">close_fs</span>(<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span=
 class=3D"code_operator">*</span>node);<br>
<span class=3D"code_primitive">struct</span>&nbsp;dirent&nbsp;<span class=
=3D"code_operator">*</span><span class=3D"code_function">readdir_fs</span>(=
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span>node,&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;=
index);<br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span><span class=3D"code_function">finddir_fs</span>(<span class=
=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_operator">*</sp=
an>node,&nbsp;<span class=3D"code_primitive">char</span>&nbsp;<span class=
=3D"code_operator">*</span>name);
</div>
<p></p>
<p></p><h4>8.1.2.2. fs.c</h4>
<p></p><div class=3D"code">
<span class=3D"code_comment">// fs.c -- Defines the interface for and struc=
tures relating to the virtual file system.</span><br>
<span class=3D"code_comment">//         Written for JamesM's kernel develop=
ment tutorials.</span><br>
<br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">in=
clude</span>&nbsp;"fs.h"<br>
</span><br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span>fs_root&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<s=
pan class=3D"code_integer">0</span>;&nbsp;<span class=3D"code_comment">// T=
he root of the filesystem.</span><br>
<br>
<span class=3D"code_primitive">u32int</span>&nbsp;<span class=3D"code_funct=
ion">read_fs</span>(<span class=3D"code_typedef">fs_node_t</span>&nbsp;<spa=
n class=3D"code_operator">*</span>node,&nbsp;<span class=3D"code_primitive"=
>u32int</span>&nbsp;offset,&nbsp;<span class=3D"code_primitive">u32int</spa=
n>&nbsp;size,&nbsp;<span class=3D"code_primitive">u8int</span>&nbsp;<span c=
lass=3D"code_operator">*</span>buffer)<br>
{<br>
&nbsp;&nbsp;<span class=3D"code_comment">// Has the node got a read callbac=
k?</span><br>
&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(node<span class=
=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span>read&nb=
sp;<span class=3D"code_operator">!=3D</span>&nbsp;<span class=3D"code_integ=
er">0</span>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;n=
ode<span class=3D"code_operator">-</span><span class=3D"code_operator">&gt;=
</span><span class=3D"code_function">read</span>(node,&nbsp;offset,&nbsp;si=
ze,&nbsp;buffer);<br>
&nbsp;&nbsp;<span class=3D"code_primitive">else</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;<=
span class=3D"code_integer">0</span>;<br>
}
</div>
<p></p>
<p>The above code should really be self-explanatory. If the node doesn't
 have a callback set, just return an error value. You should replicate=20
the above code for open(), close() and write(). The same is true of=20
readdir() and finddir(), although in those there should be an extra=20
check: If the node is actually a directory!
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">if</span>&nbsp;((node<span class=3D"code_ope=
rator">-</span><span class=3D"code_operator">&gt;</span>flags<span class=3D=
"code_operator">&amp;</span><span class=3D"code_integer">0</span>x7)&nbsp;<=
span class=3D"code_operator">=3D</span><span class=3D"code_operator">=3D</s=
pan>&nbsp;FS_DIRECTORY&nbsp;<span class=3D"code_operator">&amp;</span><span=
 class=3D"code_operator">&amp;</span>&nbsp;node<span class=3D"code_operator=
">-</span><span class=3D"code_operator">&gt;</span>readdir&nbsp;<span class=
=3D"code_operator">!=3D</span>&nbsp;<span class=3D"code_integer">0</span>&n=
bsp;)
</div>
<p></p>
<p>Believe it or not, that is all the code that is needed to make a=20
simple virtual filesystem! With this code as a base we can make our=20
initial ramdisk and maybe later more complex filesystems like FAT or=20
ext2.
</p>
<p></p><h2>8.2. The initial ramdisk</h2>
<p>An initial ramdisk is just a filesystem that is loaded into memory=20
when the kernel boots. It is useful for storing drivers and=20
configuration files that are needed before the kernel can access the=20
root filesystem (indeed, it usually contains the driver to access that=20
root filesystem!).
</p>
<p>An <i>initrd</i>, as they are known, usually uses a propriatary=20
filesystem format. The reason for this is that the most complex thing a=20
filesystem has to handle, <i>deletion of files and reclaimation of space</i=
>,
 isn't necessary. The kernel should try to get the root filesystem up=20
and running as quick as possible - why would it want to delete files=20
from the initrd??
</p>
<p>As such you can just make a filesystem format up! I've made one for you =
as well, if you're not feeling very creative ;)
</p>
<p></p><h2>8.3. My own solution</h2>
<p>My format does not support subdirectories. It stores the number of=20
files in the system as the first 4 bytes of the initrd file. That is=20
followed by a set number (64) of header structures, giving the names,=20
offsets and sizes of the files contained. The actual file data follows. I
 have written a small C program to make this for me: it takes two=20
arguments for each file to add: The path to the file from the current=20
directory and the name to give the file in the generated filesystem.
</p>
<p></p><h3>8.3.1. Filesystem generator</h3>
<p></p><div class=3D"code">
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">in=
clude</span>&nbsp;&lt;stdio.h&gt;<br>
</span><br>
<span class=3D"code_primitive">struct</span>&nbsp;initrd_header<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span>&nbsp;<span=
 class=3D"code_primitive">char</span>&nbsp;magic;&nbsp;<span class=3D"code_=
comment">// The magic number is there to check for consistency.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">char</span>&nbsp;name[<spa=
n class=3D"code_integer">64</span>];<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span>&nbsp;<span=
 class=3D"code_primitive">int</span>&nbsp;offset;&nbsp;<span class=3D"code_=
comment">// Offset in the initrd the file starts.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span>&nbsp;<span=
 class=3D"code_primitive">int</span>&nbsp;length;&nbsp;<span class=3D"code_=
comment">// Length of the file.</span><br>
};<br>
<br>
<span class=3D"code_primitive">int</span>&nbsp;<span class=3D"code_function=
">main</span>(<span class=3D"code_primitive">char</span>&nbsp;argc,&nbsp;<s=
pan class=3D"code_primitive">char</span>&nbsp;<span class=3D"code_operator"=
>*</span><span class=3D"code_operator">*</span>argv)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">int</span>&nbsp;nheaders&n=
bsp;<span class=3D"code_operator">=3D</span>&nbsp;(argc<span class=3D"code_=
operator">-</span><span class=3D"code_integer">1</span>)<span class=3D"code=
_operator">/</span><span class=3D"code_integer">2</span>;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">struct</span>&nbsp;initrd_=
header&nbsp;headers[<span class=3D"code_integer">64</span>];<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">printf</span>(<span class=
=3D"code_string">"size&nbsp;of&nbsp;header:&nbsp;%d<span class=3D"code_char=
acter">\n</span>"</span>,&nbsp;<span class=3D"code_function">sizeof</span>(=
<span class=3D"code_primitive">struct</span>&nbsp;initrd_header));<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span>&nbsp;<span=
 class=3D"code_primitive">int</span>&nbsp;off&nbsp;<span class=3D"code_oper=
ator">=3D</span>&nbsp;<span class=3D"code_function">sizeof</span>(<span cla=
ss=3D"code_primitive">struct</span>&nbsp;initrd_header)&nbsp;<span class=3D=
"code_operator">*</span>&nbsp;<span class=3D"code_integer">64</span>&nbsp;<=
span class=3D"code_operator">+</span>&nbsp;<span class=3D"code_function">si=
zeof</span>(<span class=3D"code_primitive">int</span>);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">int</span>&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">for</span>(i&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>=
;&nbsp;i&nbsp;<span class=3D"code_operator">&lt;</span>&nbsp;nheaders;&nbsp=
;i<span class=3D"code_operator">++</span>)<br>
&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">pri=
ntf</span>(<span class=3D"code_string">"writing&nbsp;file&nbsp;%s-&gt;%s&nb=
sp;at&nbsp;0x%x<span class=3D"code_character">\n</span>"</span>,&nbsp;argv[=
i<span class=3D"code_operator">*</span><span class=3D"code_integer">2</span=
><span class=3D"code_operator">+</span><span class=3D"code_integer">1</span=
>],&nbsp;argv[i<span class=3D"code_operator">*</span><span class=3D"code_in=
teger">2</span><span class=3D"code_operator">+</span><span class=3D"code_in=
teger">2</span>],&nbsp;off);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">str=
cpy</span>(headers[i].name,&nbsp;argv[i<span class=3D"code_operator">*</spa=
n><span class=3D"code_integer">2</span><span class=3D"code_operator">+</spa=
n><span class=3D"code_integer">2</span>]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers[i].offset&nbsp;<span clas=
s=3D"code_operator">=3D</span>&nbsp;off;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE&nbsp;<span class=3D"code_ope=
rator">*</span>stream&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<s=
pan class=3D"code_function">fopen</span>(argv[i<span class=3D"code_operator=
">*</span><span class=3D"code_integer">2</span><span class=3D"code_operator=
">+</span><span class=3D"code_integer">1</span>],&nbsp;<span class=3D"code_=
string">"r"</span>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if=
</span>(stream&nbsp;<span class=3D"code_operator">=3D</span><span class=3D"=
code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_f=
unction">printf</span>(<span class=3D"code_string">"Error:&nbsp;file&nbsp;n=
ot&nbsp;found:&nbsp;%s<span class=3D"code_character">\n</span>"</span>,&nbs=
p;argv[i<span class=3D"code_operator">*</span><span class=3D"code_integer">=
2</span><span class=3D"code_operator">+</span><span class=3D"code_integer">=
1</span>]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_p=
rimitive">return</span>&nbsp;<span class=3D"code_integer">1</span>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fse=
ek</span>(stream,&nbsp;<span class=3D"code_integer">0</span>,&nbsp;SEEK_END=
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers[i].length&nbsp;<span clas=
s=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_function">ftell</sp=
an>(stream);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;<span class=3D"code_oper=
ator">+</span><span class=3D"code_operator">=3D</span>&nbsp;headers[i].leng=
th;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fcl=
ose</span>(stream);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers[i].magic&nbsp;<span class=
=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>xBF=
;<br>
&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FILE&nbsp;<span class=3D"code_operator">*</span>wstream&n=
bsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_funct=
ion">fopen</span>(<span class=3D"code_string">"./initrd.img"</span>,&nbsp;<=
span class=3D"code_string">"w"</span>);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span>&nbsp;<span=
 class=3D"code_primitive">char</span>&nbsp;<span class=3D"code_operator">*<=
/span>data&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;(<span class=
=3D"code_primitive">unsigned</span>&nbsp;<span class=3D"code_primitive">cha=
r</span>&nbsp;<span class=3D"code_operator">*</span>)<span class=3D"code_fu=
nction">malloc</span>(off);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fwrite</span>(<span class=
=3D"code_operator">&amp;</span>nheaders,&nbsp;<span class=3D"code_function"=
>sizeof</span>(<span class=3D"code_primitive">int</span>),&nbsp;<span class=
=3D"code_integer">1</span>,&nbsp;wstream);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fwrite</span>(headers,&nbsp=
;<span class=3D"code_function">sizeof</span>(<span class=3D"code_primitive"=
>struct</span>&nbsp;initrd_header),&nbsp;<span class=3D"code_integer">64</s=
pan>,&nbsp;wstream);<br>
&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">for</span>(i&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>=
;&nbsp;i&nbsp;<span class=3D"code_operator">&lt;</span>&nbsp;nheaders;&nbsp=
;i<span class=3D"code_operator">++</span>)<br>
&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE&nbsp;<span class=3D"code_operator">*</sp=
an>stream&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D=
"code_function">fopen</span>(argv[i<span class=3D"code_operator">*</span><s=
pan class=3D"code_integer">2</span><span class=3D"code_operator">+</span><s=
pan class=3D"code_integer">1</span>],&nbsp;<span class=3D"code_string">"r"<=
/span>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">unsigned</span=
>&nbsp;<span class=3D"code_primitive">char</span>&nbsp;<span class=3D"code_=
operator">*</span>buf&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;(<=
span class=3D"code_primitive">unsigned</span>&nbsp;<span class=3D"code_prim=
itive">char</span>&nbsp;<span class=3D"code_operator">*</span>)<span class=
=3D"code_function">malloc</span>(headers[i].length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fread</span>(bu=
f,&nbsp;<span class=3D"code_integer">1</span>,&nbsp;headers[i].length,&nbsp=
;stream);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fwrite</span>(b=
uf,&nbsp;<span class=3D"code_integer">1</span>,&nbsp;headers[i].length,&nbs=
p;wstream);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fclose</span>(s=
tream);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">free</span>(buf=
);<br>
&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">fclose</span>(wstream);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">free</span>(data);<br>
&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;<span c=
lass=3D"code_integer">0</span>;<br>
}
</div>
<p></p>
<p><i>I'm not going to explain the contents of this file: It is=20
auxiliary and not important. Besides, you should be making your own=20
anyway! ;)</i>
</p>
<p></p><h3>8.3.2. Integrating it in to your own OS</h3>
<p><i>Even if you are using a different file format to mine, this section m=
ay be useful in helping you integrate it into the kernel.</i>
</p>
<p></p><h4>8.3.2.1. initrd.h</h4>
<p>This file just defines the header structure types and gives a function p=
rototype for the <i>initialise_initrd</i> function so the kernel can call i=
t.
</p>
<p></p><div class=3D"code">
<span class=3D"code_comment">// initrd.h -- Defines the interface for and s=
tructures relating to the initial ramdisk.</span><br>
<span class=3D"code_comment">//             Written for JamesM's kernel dev=
elopment tutorials.</span><br>
<br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">if=
ndef</span>&nbsp;INITRD_H<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;INITRD_H<br>
</span><br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">in=
clude</span>&nbsp;"common.h"<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">include</span>&nbsp;"fs.h"<br>
</span><br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span><br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;nfiles;=
&nbsp;<span class=3D"code_comment">// The number of files in the ramdisk.</=
span><br>
}&nbsp;<span class=3D"code_typedef">initrd_header_t</span>;<br>
<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span><br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u8int</span>&nbsp;magic;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Magic number, f=
or error checking.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">s8int</span>&nbsp;name[<sp=
an class=3D"code_integer">64</span>];&nbsp;&nbsp;<span class=3D"code_commen=
t">// Filename.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;offset;=
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Offset in the initrd that=
 the file starts.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;length;=
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Length of the file.</span=
><br>
}&nbsp;<span class=3D"code_typedef">initrd_file_header_t</span>;<br>
<br>
<span class=3D"code_comment">// Initialises the initial ramdisk. It gets pa=
ssed the address of the multiboot module,</span><br>
<span class=3D"code_comment">// and returns a completed filesystem node.</s=
pan><br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span><span class=3D"code_function">initialise_initrd</span>(<span =
class=3D"code_primitive">u32int</span>&nbsp;location);<br>
<br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">en=
dif</span><br>
</span>
</div>
<p></p>
<p></p><h4>8.3.2.2. initrd.c</h4>
<p>The first thing we need is some static declarations:
</p><div class=3D"code">
<span class=3D"code_comment">// initrd.c -- Defines the interface for and s=
tructures relating to the initial ramdisk.</span><br>
<span class=3D"code_comment">//             Written for JamesM's kernel dev=
elopment tutorials.</span><br>
<br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">in=
clude</span>&nbsp;"initrd.h"<br>
</span><br>
<span class=3D"code_typedef">initrd_header_t</span>&nbsp;<span class=3D"cod=
e_operator">*</span>initrd_header;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=
=3D"code_comment">// The header.</span><br>
<span class=3D"code_typedef">initrd_file_header_t</span>&nbsp;<span class=
=3D"code_operator">*</span>file_headers;&nbsp;<span class=3D"code_comment">=
// The list of file headers.</span><br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span>initrd_root;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Our root direc=
tory node.</span><br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span>initrd_dev;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// We also a=
dd a directory node for /dev, so we can mount devfs later on.</span><br>
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span>root_nodes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// List of f=
ile nodes.</span><br>
<span class=3D"code_primitive">int</span>&nbsp;nroot_nodes;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Number of file=
 nodes.</span><br>
<br>
<span class=3D"code_primitive">struct</span>&nbsp;dirent&nbsp;dirent;
</div>
<p></p>
<p>The next thing we need is a function to read from a file in our initrd.
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">static</span>&nbsp;<span class=3D"code_primi=
tive">u32int</span>&nbsp;<span class=3D"code_function">initrd_read</span>(<=
span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_opera=
tor">*</span>node,&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;o=
ffset,&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;size,&nbsp;<s=
pan class=3D"code_primitive">u8int</span>&nbsp;<span class=3D"code_operator=
">*</span>buffer)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_typedef">initrd_file_header_t</span>&=
nbsp;header&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;file_headers=
[node<span class=3D"code_operator">-</span><span class=3D"code_operator">&g=
t;</span>inode];<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(offset&nbs=
p;<span class=3D"code_operator">&gt;</span>&nbsp;header.length)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">re=
turn</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(offset<spa=
n class=3D"code_operator">+</span>size&nbsp;<span class=3D"code_operator">&=
gt;</span>&nbsp;header.length)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;<span class=3D"code_ope=
rator">=3D</span>&nbsp;header.length<span class=3D"code_operator">-</span>o=
ffset;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">memcpy</span>(buffer,&nbsp;=
(<span class=3D"code_primitive">u8int</span><span class=3D"code_operator">*=
</span>)&nbsp;(header.offset<span class=3D"code_operator">+</span>offset),&=
nbsp;size);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;size;<b=
r>
}
</div>
<p></p>
<p>That function demonstrates one very annoying thing about writing low=20
level code: 80% of it is error-checking. Unfortunately you can't get=20
away from it - if you leave it out you will spend literally days trying=20
to work out why your code doesn't work.
</p>
<p>It would also be quite useful to have some working readdir and finddir f=
unctions:
</p>
<p></p><div class=3D"code">
<span class=3D"code_primitive">static</span>&nbsp;<span class=3D"code_primi=
tive">struct</span>&nbsp;dirent&nbsp;<span class=3D"code_operator">*</span>=
<span class=3D"code_function">initrd_readdir</span>(<span class=3D"code_typ=
edef">fs_node_t</span>&nbsp;<span class=3D"code_operator">*</span>node,&nbs=
p;<span class=3D"code_primitive">u32int</span>&nbsp;index)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(node&nbsp;=
<span class=3D"code_operator">=3D</span><span class=3D"code_operator">=3D</=
span>&nbsp;initrd_root&nbsp;<span class=3D"code_operator">&amp;</span><span=
 class=3D"code_operator">&amp;</span>&nbsp;index&nbsp;<span class=3D"code_o=
perator">=3D</span><span class=3D"code_operator">=3D</span>&nbsp;<span clas=
s=3D"code_integer">0</span>)<br>
&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">strcpy</span>(d=
irent.name,&nbsp;<span class=3D"code_string">"dev"</span>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dirent.name[<span class=3D"code_integer">3</s=
pan>]&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"cod=
e_integer">0</span>;&nbsp;<span class=3D"code_comment">// Make sure the str=
ing is NULL-terminated.</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dirent.ino&nbsp;<span class=3D"code_operator"=
>=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&=
nbsp;<span class=3D"code_operator">&amp;</span>dirent;<br>
&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(index<span=
 class=3D"code_operator">-</span><span class=3D"code_integer">1</span>&nbsp=
;<span class=3D"code_operator">&gt;</span><span class=3D"code_operator">=3D=
</span>&nbsp;nroot_nodes)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">re=
turn</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">strcpy</span>(dirent.name,&=
nbsp;root_nodes[index<span class=3D"code_operator">-</span><span class=3D"c=
ode_integer">1</span>].name);<br>
&nbsp;&nbsp;&nbsp;dirent.name[<span class=3D"code_function">strlen</span>(r=
oot_nodes[index<span class=3D"code_operator">-</span><span class=3D"code_in=
teger">1</span>].name)]&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;=
<span class=3D"code_integer">0</span>;&nbsp;<span class=3D"code_comment">//=
 Make sure the string is NULL-terminated.</span><br>
&nbsp;&nbsp;&nbsp;dirent.ino&nbsp;<span class=3D"code_operator">=3D</span>&=
nbsp;root_nodes[index<span class=3D"code_operator">-</span><span class=3D"c=
ode_integer">1</span>].inode;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;<span c=
lass=3D"code_operator">&amp;</span>dirent;<br>
}<br>
<br>
<span class=3D"code_primitive">static</span>&nbsp;<span class=3D"code_typed=
ef">fs_node_t</span>&nbsp;<span class=3D"code_operator">*</span><span class=
=3D"code_function">initrd_finddir</span>(<span class=3D"code_typedef">fs_no=
de_t</span>&nbsp;<span class=3D"code_operator">*</span>node,&nbsp;<span cla=
ss=3D"code_primitive">char</span>&nbsp;<span class=3D"code_operator">*</spa=
n>name)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;(node&nbsp;=
<span class=3D"code_operator">=3D</span><span class=3D"code_operator">=3D</=
span>&nbsp;initrd_root&nbsp;<span class=3D"code_operator">&amp;</span><span=
 class=3D"code_operator">&amp;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_operator">!</=
span><span class=3D"code_function">strcmp</span>(name,&nbsp;<span class=3D"=
code_string">"dev"</span>)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">re=
turn</span>&nbsp;initrd_dev;<br>
<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">int</span>&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">for</span>&nbsp;(i&nbsp;<s=
pan class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0<=
/span>;&nbsp;i&nbsp;<span class=3D"code_operator">&lt;</span>&nbsp;nroot_no=
des;&nbsp;i<span class=3D"code_operator">++</span>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">if=
</span>&nbsp;(<span class=3D"code_operator">!</span><span class=3D"code_fun=
ction">strcmp</span>(name,&nbsp;root_nodes[i].name))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span cla=
ss=3D"code_primitive">return</span>&nbsp;<span class=3D"code_operator">&amp=
;</span>root_nodes[i];<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;<span c=
lass=3D"code_integer">0</span>;<br>
}
</div>
<p></p>
<p>Last but not least we need to initialise the filesystem:
</p>
<p></p><div class=3D"code">
<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=3D"code_oper=
ator">*</span><span class=3D"code_function">initialise_initrd</span>(<span =
class=3D"code_primitive">u32int</span>&nbsp;location)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise the main and f=
ile header pointers and populate the root directory.</span><br>
&nbsp;&nbsp;&nbsp;initrd_header&nbsp;<span class=3D"code_operator">=3D</spa=
n>&nbsp;(<span class=3D"code_typedef">initrd_header_t</span>&nbsp;<span cla=
ss=3D"code_operator">*</span>)location;<br>
&nbsp;&nbsp;&nbsp;file_headers&nbsp;<span class=3D"code_operator">=3D</span=
>&nbsp;(<span class=3D"code_typedef">initrd_file_header_t</span>&nbsp;<span=
 class=3D"code_operator">*</span>)&nbsp;(location<span class=3D"code_operat=
or">+</span><span class=3D"code_function">sizeof</span>(<span class=3D"code=
_typedef">initrd_header_t</span>));
</div>
<p></p>
<p>We assume that the kernel knows where our initrd starts and can convey t=
hat location to the initialise function.
</p>
<p></p><div class=3D"code">
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise the root direc=
tory.</span><br>
&nbsp;&nbsp;&nbsp;initrd_root&nbsp;<span class=3D"code_operator">=3D</span>=
&nbsp;(<span class=3D"code_typedef">fs_node_t</span><span class=3D"code_ope=
rator">*</span>)<span class=3D"code_function">kmalloc</span>(<span class=3D=
"code_function">sizeof</span>(<span class=3D"code_typedef">fs_node_t</span>=
));<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">strcpy</span>(initrd_root<s=
pan class=3D"code_operator">-</span><span class=3D"code_operator">&gt;</spa=
n>name,&nbsp;<span class=3D"code_string">"initrd"</span>);<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>mask&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;initrd_root<span class=3D"code_operator">-</span><span clas=
s=3D"code_operator">&gt;</span>uid&nbsp;<span class=3D"code_operator">=3D</=
span>&nbsp;initrd_root<span class=3D"code_operator">-</span><span class=3D"=
code_operator">&gt;</span>gid&nbsp;<span class=3D"code_operator">=3D</span>=
&nbsp;initrd_root<span class=3D"code_operator">-</span><span class=3D"code_=
operator">&gt;</span>inode&nbsp;<span class=3D"code_operator">=3D</span>&nb=
sp;initrd_root<span class=3D"code_operator">-</span><span class=3D"code_ope=
rator">&gt;</span>length&nbsp;<span class=3D"code_operator">=3D</span>&nbsp=
;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>flags&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;FS_DIRECTORY;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>read&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>write&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>open&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>close&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>readdir&nbsp;<span class=3D"code_operator"=
>=3D</span>&nbsp;<span class=3D"code_operator">&amp;</span>initrd_readdir;<=
br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>finddir&nbsp;<span class=3D"code_operator"=
>=3D</span>&nbsp;<span class=3D"code_operator">&amp;</span>initrd_finddir;<=
br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>ptr&nbsp;<span class=3D"code_operator">=3D=
</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_root<span class=3D"code_operator">-</span><span cl=
ass=3D"code_operator">&gt;</span>impl&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;
</div>
<p></p>
<p>Here we make the root directory node. We get some memory from the=20
kernel heap and give the node a name. We really don't need to name this=20
node as the root is never referenced by name, just '/'.
</p>
<p>Most of the code initialises pointers to NULL (0), but you'll notice=20
that the node is told it is a directory (flags =3D FS_DIRECTORY) and that=
=20
it has both readdir and finddir functions.
</p>
<p>The same is done for the /dev node:
</p>
<p></p><div class=3D"code">
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise the /dev direc=
tory (required!)</span><br>
&nbsp;&nbsp;&nbsp;initrd_dev&nbsp;<span class=3D"code_operator">=3D</span>&=
nbsp;(<span class=3D"code_typedef">fs_node_t</span><span class=3D"code_oper=
ator">*</span>)<span class=3D"code_function">kmalloc</span>(<span class=3D"=
code_function">sizeof</span>(<span class=3D"code_typedef">fs_node_t</span>)=
);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">strcpy</span>(initrd_dev<sp=
an class=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span=
>name,&nbsp;<span class=3D"code_string">"dev"</span>);<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>mask&nbsp;<span class=3D"code_operator">=3D=
</span>&nbsp;initrd_dev<span class=3D"code_operator">-</span><span class=3D=
"code_operator">&gt;</span>uid&nbsp;<span class=3D"code_operator">=3D</span=
>&nbsp;initrd_dev<span class=3D"code_operator">-</span><span class=3D"code_=
operator">&gt;</span>gid&nbsp;<span class=3D"code_operator">=3D</span>&nbsp=
;initrd_dev<span class=3D"code_operator">-</span><span class=3D"code_operat=
or">&gt;</span>inode&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;ini=
trd_dev<span class=3D"code_operator">-</span><span class=3D"code_operator">=
&gt;</span>length&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span =
class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>flags&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;FS_DIRECTORY;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>read&nbsp;<span class=3D"code_operator">=3D=
</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>write&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>open&nbsp;<span class=3D"code_operator">=3D=
</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>close&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>readdir&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_operator">&amp;</span>initrd_readdir;<b=
r>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>finddir&nbsp;<span class=3D"code_operator">=
=3D</span>&nbsp;<span class=3D"code_operator">&amp;</span>initrd_finddir;<b=
r>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>ptr&nbsp;<span class=3D"code_operator">=3D<=
/span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;initrd_dev<span class=3D"code_operator">-</span><span cla=
ss=3D"code_operator">&gt;</span>impl&nbsp;<span class=3D"code_operator">=3D=
</span>&nbsp;<span class=3D"code_integer">0</span>;
</div>
<p></p>
<p>Now that they're done we can start actually adding the files in the ramd=
isk. First we allocate space for them:
</p><div class=3D"code">
&nbsp;&nbsp;&nbsp;root_nodes&nbsp;<span class=3D"code_operator">=3D</span>&=
nbsp;(<span class=3D"code_typedef">fs_node_t</span><span class=3D"code_oper=
ator">*</span>)<span class=3D"code_function">kmalloc</span>(<span class=3D"=
code_function">sizeof</span>(<span class=3D"code_typedef">fs_node_t</span>)=
&nbsp;<span class=3D"code_operator">*</span>&nbsp;initrd_header<span class=
=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span>nfiles)=
;<br>
&nbsp;&nbsp;&nbsp;nroot_nodes&nbsp;<span class=3D"code_operator">=3D</span>=
&nbsp;initrd_header<span class=3D"code_operator">-</span><span class=3D"cod=
e_operator">&gt;</span>nfiles;
</div>
<p></p>
<p>Then we make them:
</p>
<p></p><div class=3D"code">
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// For every file...</span><=
br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">int</span>&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">for</span>&nbsp;(i&nbsp;<s=
pan class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0<=
/span>;&nbsp;i&nbsp;<span class=3D"code_operator">&lt;</span>&nbsp;initrd_h=
eader<span class=3D"code_operator">-</span><span class=3D"code_operator">&g=
t;</span>nfiles;&nbsp;i<span class=3D"code_operator">++</span>)<br>
&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// E=
dit the file's header - currently it holds the file offset</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// r=
elative to the start of the ramdisk. We want it relative to the start</span=
><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// o=
f memory.</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_headers[i].offset&nbsp;<span=
 class=3D"code_operator">+</span><span class=3D"code_operator">=3D</span>&n=
bsp;location;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// C=
reate a new file node.</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">str=
cpy</span>(root_nodes[i].name,&nbsp;<span class=3D"code_operator">&amp;</sp=
an>file_headers[i].name);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].mask&nbsp;<span cla=
ss=3D"code_operator">=3D</span>&nbsp;root_nodes[i].uid&nbsp;<span class=3D"=
code_operator">=3D</span>&nbsp;root_nodes[i].gid&nbsp;<span class=3D"code_o=
perator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].length&nbsp;<span c=
lass=3D"code_operator">=3D</span>&nbsp;file_headers[i].length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].inode&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].flags&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;FS_FILE;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].read&nbsp;<span cla=
ss=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_operator">&amp;</s=
pan>initrd_read;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].write&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>=
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].readdir&nbsp;<span =
class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</spa=
n>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].finddir&nbsp;<span =
class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</spa=
n>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].open&nbsp;<span cla=
ss=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>;=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].close&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>=
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_nodes[i].impl&nbsp;<span cla=
ss=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>;=
<br>
&nbsp;&nbsp;&nbsp;}
</div>
<p></p>
<p>And finally return the root node so the kernel can access us:
</p>
<p></p><div class=3D"code">
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">return</span>&nbsp;initrd_=
root;<br>
}
</div>
<p></p>
<p></p><h2>8.4. Loading the initrd as a multiboot module</h2>
<p>Now we need to work out how to get our initrd loaded into memory in=20
the first place. Luckily, the multiboot specification allows for=20
'modules' to be loaded. We can tell GRUB to load our initrd as a module.
 You can do this by mounting the floppy.img file as a loopback device,=20
finding the /boot/grub/menu.lst file and adding a 'module (fd0)/initrd'=20
line just below the 'kernel' line.
</p>
<p>Alternatively you can download a new and improved image from <a href=3D"=
http://www.jamesmolloy.co.uk/tutorial_html/floppy_module.img">here</a>.
</p>
<p>GRUB communicates the location of this file to us via the multiboot=20
information structure that we declared but never defined in the first=20
tutorial. We have to define it now: This definition is lifted directly=20
from the <a href=3D"http://www.gnu.org/software/grub/manual/multiboot/multi=
boot.html">Multiboot spec</a>.
</p>
<p><i>multiboot.h</i>
</p><div class=3D"code">
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">in=
clude</span>&nbsp;"common.h"<br>
</span><br>
<span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_cmd">de=
fine</span>&nbsp;MULTIBOOT_FLAG_MEM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x001<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_DEVICE&nbsp;&nbsp;0x002<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_CMDLINE&nbsp;0x004<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_MODS&nbsp;&nbsp;&nbsp;&nbsp;0x008<br=
>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_AOUT&nbsp;&nbsp;&nbsp;&nbsp;0x010<br=
>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_ELF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x0=
20<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_MMAP&nbsp;&nbsp;&nbsp;&nbsp;0x040<br=
>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_CONFIG&nbsp;&nbsp;0x080<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_LOADER&nbsp;&nbsp;0x100<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_APM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x2=
00<br>
</span><span class=3D"code_preprocessor">#<span class=3D"code_preprocessor_=
cmd">define</span>&nbsp;MULTIBOOT_FLAG_VBE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x4=
00<br>
</span><br>
<span class=3D"code_primitive">struct</span>&nbsp;multiboot<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;flags;<=
br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mem_low=
er;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mem_upp=
er;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;boot_de=
vice;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;cmdline=
;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mods_co=
unt;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mods_ad=
dr;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;num;<br=
>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;size;<b=
r>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;addr;<b=
r>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;shndx;<=
br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mmap_le=
ngth;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;mmap_ad=
dr;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;drives_=
length;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;drives_=
addr;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;config_=
table;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;boot_lo=
ader_name;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;apm_tab=
le;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_con=
trol_info;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_mod=
e_info;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_mod=
e;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_int=
erface_seg;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_int=
erface_off;<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;vbe_int=
erface_len;<br>
}&nbsp;&nbsp;<span class=3D"code_function">__attribute__</span>((packed));<=
br>
<br>
<span class=3D"code_primitive">typedef</span>&nbsp;<span class=3D"code_prim=
itive">struct</span>&nbsp;multiboot_header&nbsp;<span class=3D"code_typedef=
">multiboot_header_t</span>;
</div>
<p></p>
<p>The interesting fields are the <i>mods_addr</i> and <i>mods_count</i> fi=
elds. The <i>mods_count</i> field contains the number of modules loaded. We=
 should check that this is &gt; 0. The <i>mods_addr</i> field is an array o=
f addresses: Each 'entry' consists of the starting address of the module an=
d it's end, each being 4 bytes.
</p>
<p>As we are only expecting one module we can just treat the <i>mods_addr</=
i>
 field as a pointer and find whatever value lies there. That will be the
 location of our initrd. The value of the address 4 bytes on from that=20
will be the end address. We can use this to change the memory management
 placement address so that memory allocations don't accidentally=20
overwrite our ramdisk!
</p>
<p><i>main.c</i>
</p><div class=3D"code">
<span class=3D"code_primitive">int</span>&nbsp;<span class=3D"code_function=
">main</span>(<span class=3D"code_primitive">struct</span>&nbsp;multiboot&n=
bsp;<span class=3D"code_operator">*</span>mboot_ptr)<br>
{<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise all the ISRs a=
nd segmentation</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">init_descriptor_tables</spa=
n>();<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise the screen (by=
 clearing it)</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">monitor_clear</span>();<br>
<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Find the location of our =
initial ramdisk.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">ASSERT</span>(mboot_ptr<spa=
n class=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span>=
mods_count&nbsp;<span class=3D"code_operator">&gt;</span>&nbsp;<span class=
=3D"code_integer">0</span>);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;initrd_=
location&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"=
code_operator">*</span>((<span class=3D"code_primitive">u32int</span><span =
class=3D"code_operator">*</span>)mboot_ptr<span class=3D"code_operator">-</=
span><span class=3D"code_operator">&gt;</span>mods_addr);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;initrd_=
end&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_=
operator">*</span>(<span class=3D"code_primitive">u32int</span><span class=
=3D"code_operator">*</span>)(mboot_ptr<span class=3D"code_operator">-</span=
><span class=3D"code_operator">&gt;</span>mods_addr<span class=3D"code_oper=
ator">+</span><span class=3D"code_integer">4</span>);<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Don't trample our module =
with placement accesses, please!</span><br>
&nbsp;&nbsp;&nbsp;placement_address&nbsp;<span class=3D"code_operator">=3D<=
/span>&nbsp;initrd_end;<br>
<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Start paging.</span><br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_function">initialise_paging</span>();=
<br>
<br>
&nbsp;&nbsp;&nbsp;<span class=3D"code_comment">// Initialise the initial ra=
mdisk, and set it as the filesystem root.</span><br>
&nbsp;&nbsp;&nbsp;fs_root&nbsp;<span class=3D"code_operator">=3D</span>&nbs=
p;<span class=3D"code_function">initialise_initrd</span>(initrd_location);<=
br>
}
</div>
<p></p>
<p>Success! That's one VFS and initrd cooked up in no time. Let's test it o=
ut.
</p>
<p></p><h2>8.5. Testing it out</h2>
<p></p><div class=3D"image_frame"><img src=3D"http://www.jamesmolloy.co.uk/=
tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/the_vfs_and_initrd_bo=
chs.png"><br><span class=3D"image_caption">Success!</span></div>Firstly let=
's add some test code to find all files in '/' and print their contents:
<p></p>
<p><i>main.c</i>
</p><div class=3D"code">
<span class=3D"code_comment">// list the contents of /</span><br>
<span class=3D"code_primitive">int</span>&nbsp;i&nbsp;<span class=3D"code_o=
perator">=3D</span>&nbsp;<span class=3D"code_integer">0</span>;<br>
<span class=3D"code_primitive">struct</span>&nbsp;dirent&nbsp;<span class=
=3D"code_operator">*</span>node&nbsp;<span class=3D"code_operator">=3D</spa=
n>&nbsp;<span class=3D"code_integer">0</span>;<br>
<span class=3D"code_primitive">while</span>&nbsp;(&nbsp;(node&nbsp;<span cl=
ass=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_function">readdir=
_fs</span>(fs_root,&nbsp;i))&nbsp;<span class=3D"code_operator">!=3D</span>=
&nbsp;<span class=3D"code_integer">0</span>)<br>
{<br>
&nbsp;&nbsp;<span class=3D"code_function">monitor_write</span>(<span class=
=3D"code_string">"Found&nbsp;file&nbsp;"</span>);<br>
&nbsp;&nbsp;<span class=3D"code_function">monitor_write</span>(node<span cl=
ass=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span>name=
);<br>
&nbsp;&nbsp;<span class=3D"code_typedef">fs_node_t</span>&nbsp;<span class=
=3D"code_operator">*</span>fsnode&nbsp;<span class=3D"code_operator">=3D</s=
pan>&nbsp;<span class=3D"code_function">finddir_fs</span>(fs_root,&nbsp;nod=
e<span class=3D"code_operator">-</span><span class=3D"code_operator">&gt;</=
span>name);<br>
<br>
&nbsp;&nbsp;<span class=3D"code_primitive">if</span>&nbsp;((fsnode<span cla=
ss=3D"code_operator">-</span><span class=3D"code_operator">&gt;</span>flags=
<span class=3D"code_operator">&amp;</span><span class=3D"code_integer">0</s=
pan>x7)&nbsp;<span class=3D"code_operator">=3D</span><span class=3D"code_op=
erator">=3D</span>&nbsp;FS_DIRECTORY)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">monitor_write</span>(=
<span class=3D"code_string">"<span class=3D"code_character">\n</span><span =
class=3D"code_character">\t</span>(directory)<span class=3D"code_character"=
>\n</span>"</span>);<br>
&nbsp;&nbsp;<span class=3D"code_primitive">else</span><br>
&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">monitor_write</span>(=
<span class=3D"code_string">"<span class=3D"code_character">\n</span><span =
class=3D"code_character">\t</span>&nbsp;contents:&nbsp;<span class=3D"code_=
character">\"</span>"</span>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">char</span>&nbsp;buf=
[<span class=3D"code_integer">256</span>];<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">u32int</span>&nbsp;s=
z&nbsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_fu=
nction">read_fs</span>(fsnode,&nbsp;<span class=3D"code_integer">0</span>,&=
nbsp;<span class=3D"code_integer">256</span>,&nbsp;buf);<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">int</span>&nbsp;j;<b=
r>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_primitive">for</span>&nbsp;(j&n=
bsp;<span class=3D"code_operator">=3D</span>&nbsp;<span class=3D"code_integ=
er">0</span>;&nbsp;j&nbsp;<span class=3D"code_operator">&lt;</span>&nbsp;sz=
;&nbsp;j<span class=3D"code_operator">++</span>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">monitor_p=
ut</span>(buf[j]);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span class=3D"code_function">monitor_write</span>(=
<span class=3D"code_string">"<span class=3D"code_character">\"</span><span =
class=3D"code_character">\n</span>"</span>);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;i<span class=3D"code_operator">++</span>;<br>
}
</div>
<p></p>
<p>Make a couple of test files, and build!
</p>
<p></p><div class=3D"code">
./make_initrd&nbsp;test.txt&nbsp;test.txt&nbsp;test2.txt&nbsp;test2.txt<br>
<span class=3D"code_primitive">cd</span>&nbsp;src<br>
make&nbsp;clean<br>
make<br>
<span class=3D"code_primitive">cd</span>&nbsp;..<br>
./update_image.sh<br>
./run_bochs.sh
</div>
<p></p>
<p>The code for this tutorial can be found <a href=3D"http://www.jamesmollo=
y.co.uk/tutorial_html/the_vfs_and_initrd.tar.gz">here</a>.
</p></div>
<div class=3D"footer">Copyright James Molloy 2008 - james&lt;at&gt;jamesmol=
loy.co.uk</div>



</body></html>
------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/highlight.css

@charset "windows-1252";

.code { font-family: monospace; font-size: 10pt; }

.code_primitive { font-weight: bold; }

.code_integer { color: blue; }

.code_hex_integer { color: rgb(136, 136, 255); }

.code_float { color: purple; }

.code_comment { font-style: italic; color: gray; }

.code_string { color: red; }

.code_character { color: green; }

.code_preprocessor { color: green; }

.code_preprocessor_cmd { font-weight: bold; }

.code_function { color: purple; }

.code_label { color: blue; font-weight: bold; }

.code_operator { color: navy; }

.code_continuation { color: red; }

.code_variable { color: green; font-weight: bold; }

.code_typedef { color: darkgreen; }
------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/layout.css

@charset "windows-1252";

#toc { float: left; margin-left: 0px; padding-left: 0px; font-size: 10pt; }

#toc ul { margin-left: 0px; padding-left: 0px; list-style-type: none; }

#toc ul ul { padding-left: 5px; margin-left: 0px; list-style-type: none; }

#toc a { color: rgb(34, 119, 34); text-decoration: none; font-weight: bold;=
 }

#toc a:hover { text-decoration: underline; }

#toc a.selected { color: black; }

#toc ul ul a { color: rgb(51, 51, 119); font-weight: normal; text-decoratio=
n: none; }

#toc ul ul a.selected { }

#toc ul ul ul a { color: black; }

.main_frame { position: relative; border: 1px solid gray; top: 10px; bottom=
: 10px; padding: 5px; background-color: white; z-index: 10; }

.footer { padding-top: 10px; font-weight: bold; font-style: italic; }

.header { color: rgb(51, 51, 119); font-size: 32pt; }

.header_subtitle { padding-left: 50px; color: black; font-size: 18pt; }

.header_subtitle a { color: black; text-decoration: none; font-weight: bold=
; }

body { padding: 5px; font-family: Tahoma, "Sans serif"; font-size: 12pt; ba=
ckground-color: rgb(238, 238, 238); }

h1 { color: rgb(102, 0, 102); }

h2 { border-bottom: 1px solid gray; }

.code { background-color: rgb(221, 221, 255); border: 1px dashed purple; pa=
dding: 5px; }

.image_frame { border: 1px solid purple; padding: 1px; float: right; backgr=
ound-color: white; }

.image_frame img { border: 1px dashed darkblue; }

.image_caption { font-style: italic; font-size: small; }

.index { border: 1px solid rgb(153, 153, 204); padding: 5px; position: rela=
tive; float: right; background-color: rgb(204, 204, 255); text-decoration: =
none; z-index: 100; }

.toc_wrapper div { float: none; position: relative; }

.index a { text-decoration: none; }

.index .selected { font-weight: bold; color: black; }
------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/vfs.png

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
9PXmX/Z/TnzaJZFIuyT4/wcPf83ayfWP/37j6R96/1bZ3euX5q/fRylgtZDk+zc96+qS9LFxYLqV
fLC14OiONXk71zU31FoI7SbMTHxj3ip8ReObWrC18os+uYFHIK1N9XKE4Zma459imFHo7KSg8PeV
3WkZ/ca7Jw5kvLNyR1HBNzxT8xEhb1ENWDUkOTE1t8KMuA1PHjAgfjDiyjkEcUcb4exsnAbOX79P
KpU+uFV29ogoN3O10L7/mLD3AKtFnzGVMU8wwNOvrKiQaKl/cr/mxtXuT0347n7jy4tP2fUf7ODq
IfuP6D8mLLq9penPkz8UHds/IiTShG9KLWB1kLgmPEmn+MXCY8JzHxl84fi3HW0tkNuBlV2/2gd3
pV1dzz3ks573DDgcjuMgr7eXZRjzBPduXgNsFz3fw50Ss+7v348XfvtFZ0d73aPqPWujjbjGxKfT
k9If3ClPjw25cPzbiktnSs/k5mau/nH7KqKDvYv7wKGjf9j279oHdwNkljESd+NKpVLizU+1kBwH
ena0tZw5vOP2tYv4/eVpSzY31D7cEjPu4k8HKkpOn8/d/d3mRBgmXm5cvhOjmuuf5olSWhqfPbxT
vmvlDCJSenr/TnpsyOmD2ytKTpddKNz/2SJxe6vn6FDWc0PP96mGBk1e8Nl3R3eu/WHrR32sHV6L
WCD7qbO7z6qvL+aJUg6mJzXX15pZCgd4jQqZsVi2z5jJ0QfSFlvZ9XvFL4QGwKohDR8f8VrEgtzM
1S2NdZa2TpsKql08RibvOX9059r9G+PaW5ttnFwD3pwDoR30f2XE3JS9eVkpx/f+p6+d88TZScSD
PFMLK6GDy4kDGU/v38Ewo36Dh8WmHfb0Zz839LbPntLnzeS+xcEgqGhcbIipsopf8ukwz4pc+MEa
A2LruBjPjRhfgAQJ4gZ9QtGKRd0SC1VGjgQWbpA+MZS6ctKDQEgCD7aOC/kN+oI0cn8fnpCSreMi
4V4FDHUuABlleJhVnwpAVqiGreNivN/QPbjCiUHDxh6yoMJGDLLGxaZ8Q/+122SLsWqxdMlWQ6Kt
LJLuUGEjBonjwlcoFvAEIm6A3lTwBkqKeNNJDx2hwkYMcsfFgvJteq5rqOzqymYIX6JU2xnNs6IL
VNiIQe64mE4PfW5Y0OTSPVMItd/S15RoARVaYpA1LkbTQ29mRHVRZ3SYHen60fpbDE0/MPYRAwlU
+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

------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/vfs_mountpoint.png

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

------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd_files/the_vfs_and_initrd_bochs.png

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
AjQAAAQEaAAACAjQAAAQEKABACAgQAMAQECABgCAgAANAAABARoAAAICNAAABARoAAAICNAAABAQ
oAEAICBAAwBAQIAGAICAAA0AAAEBGgAAAgI0AAAEBGgAAAgI0AAAEBCgAQAgIEADAEBAgAYAgIAA
DQAAAQEaAAACAjQAAAQEaAAACAjQAAAQEKABACAgQAMAQECABgCAgAANAAABARoAAAICNAAABARo
AAAICNAAABAQoAEAICBAAwBAQIAGAICAAA0AAAEBGgAAAgI0AAAEBGgAAAgI0AAAEBCgAQAgIEAD
AEBAgAYAgIAADQAAAQEaAAACAjQAAAQEaAAACAjQAAAQEKABACAgQAMAQECABgCAgAANAAABARoA
AAICNAAABARoAAAICNAAABAQoAEAICBAAwBAQIAGAICAAA0AAAEBGgAAAgI0AAAEBGgAAAgI0AAA
EBCgAQAgIEADAEBAgAYAgIAADQAAAQEaAAACAjQAAAQEaAAACAjQAAAQEKABACAgQAMAQECABgCA
gAANAAABARoAAAICNAAABARoAAAICNAAABAQoAEAICBAAwBAQIAGAICAAA0AAAEBGgAAAgI0AAAE
BGgAAAgI0AAAEBCgAQAgIEADAEBAgAYAgIAADQAAAQEaAAACAjQAAAQEaAAACAjQAAAQEKABACAg
QAMAQECABgCAgAANAAABARoAAAICNAAABARoAAAICNAAABAQoAEAICBAAwBAQIAGAICAAA0AAAEB
GgAAAgI0AAAEBGgAAAgI0AAAEBCgAQAgIEADAEBAgAYAgIAADQAAAQEaAAACAjQAAAQEaAAACAjQ
AAAQEKABACAgQAMAQECABgCAgAANAAABARoAAAICNAAABARoAAAICNAAABAQoAEAICBAAwBAQIAG
AICAAA0AAAEBGgAAAgI0AAAEBGgAAAgI0AAAEBCgAQAgIEADAEBAgAYAgIAADQAAAQEaAAACAjQA
AAQEaAAACAjQAAAQEKABACAgQAMAQECABgCAgAANAAABARoAAAICNAAABARoAAAICNAAABAQoAEA
ICBAAwBAQIAGAICAAA0AAAEBGgAAAgI0AAAEBGgAAAgI0AAAEBCgAQAgIEADAEBAgAYAgIAADQAA
AQEaAAACAjQAAAQEaAAACAjQAAAQEKABACDw9fPzc3UbAADgMfRAw4rX63V1E1Zp3z7at4/27aN9
+2gfV/q6ugHwBK/pfj+EP5OzRwBwBT3QAAAQEKABACAgQAMAQECABgCAwH8uIpxfMfq+vd3SVaQ/
Pz9/vD6f/shb49Xak8y/Nv3R7b+bteV9r+vftD42e03Tldf0/fPPP9Pff//9x9/p60e38a2sa6k9
c7X3Rra5Vu7S67X2nbEeAbjevwG6DFLvv9eC8dL0RyvruMNtYmrL/vQwvnSgxIJ3eL5ZiL6TtcBe
C/VnBv8tBxpnH4AAcB/VIRxnB78tQe3pAZUPMA/N7xBdvn9T717Usjf1DEs9tu/AuqWc0WrlCskA
TNODx0Av9Zi//y3D+Pu13pC+NP1SmWv1pu1Zm35LO5P1MGL9pOXMp0vWz9Lfo5ZruFfx78HSALrU
wwoAtO16kMrSmOk9ZfSOuZ0Hr9owkvf/14L2mmRoylIda6/3tLmn3i3l1KZPlrdW71p7aubzbS1n
ZHuGu8GwjidbGntcHiSMCv9byj1qLDYA97crQNdCYlrGNGUBpycIPnFoR9rm2sFA66LAvVoXls7H
zh9trd7Tep7Xqjl5M9zSC321Wnt7hlGM7EFPy9WDD/B77X6U94gQzTZ77j6yJ1zW6j3rTiy99Z7W
hnk1Nx7zfFdrd9+4OyEa4HeqjoFOAtaIuzX0hp073BVirQ21945ud1L+yLYsjWM++u4dtbHRa/Ve
Pg76RE8Ic1uD8lEBu7fcpem2XPwIwLP92wNdho89vXdlWBnZE5i2c0uYWyq/HCpQC25lD2j5+qj1
vGc9lPPWylkaa16rd+ty1caOr5Xf+iz2tGeo+UWEF52gOWrM8FXtOHsM9N6x0SPbCMB9vH6MvYCq
fy9K3NqVfGB4/pnuP3xK+/bRvn20bx/t2+fu7WOfx97GDh7BbycAfJz/AWffo2nvemdcAAAAAElF
TkSuQmCC

------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp----
Content-Type: text/html
Content-ID: <frame-B9967EA9977C8BADDC5D9A6FE47621EE@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"></head><body marginwidth=3D"0" marginheight=3D"0">=
</body></html>
------MultipartBoundary--jaP7E254E0TM1T4InjAlaC4OUGJBv7j9hPMWeroVnp------
